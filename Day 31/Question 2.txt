/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    private static class Pair<K, V> {

		K x;
		V y;

		public Pair(K element0, V element1) {
			this.x = element0;
			this.y = element1;
		}

		@Override
		public String toString() {
			return x + " " + y;
		}
	}
	public static int determineStart(int pos){
	    if(pos>=6)
            return 6;
        else if(pos>=3)
            return 3;
        else
            return 0;
	}
	public static List<Integer> getPossibleValues(Pair<Integer,Integer> coordinate, int[][] sudoku){
        HashSet<Integer> allPossible = new HashSet<>(Arrays.asList(1,2,3,4,5,6,7,8,9));
        for(int i=0;i<9;++i)
                allPossible.remove(sudoku[coordinate.x][i]);
        for(int i=0;i<9;++i)
                allPossible.remove(sudoku[i][coordinate.y]);
        int xstart = determineStart(coordinate.x), ystart = determineStart(coordinate.y);
        for(int i=xstart;i<xstart+3;++i){
            for(int j=ystart;j<ystart+3;++j){
                allPossible.remove(sudoku[i][j]);
            }
        }
        ArrayList<Integer> result = new ArrayList<>(9);
        result.addAll(allPossible);
        return result;
	}
	public static boolean recur(int[][] sudoku, int index, ArrayList<Pair<Integer,Integer>> zeroes){
        if(index==zeroes.size())
            return true;
        Pair<Integer,Integer> coordinate = zeroes.get(index);
        List<Integer> possibleValues = getPossibleValues(coordinate,sudoku);
        if(possibleValues.size()==0)
            return false;
        boolean bool=false;
        for(Integer ele: possibleValues){
            sudoku[coordinate.x][coordinate.y]=ele;
            if(!recur(sudoku,index+1,zeroes))
                sudoku[coordinate.x][coordinate.y]=0;
            else{
                bool=true;
                break;
            }
        }
        return bool;
	}
    public static void solver(int[][] sudoku){
        ArrayList<Pair<Integer,Integer>> zeroes = new ArrayList<>(81);
        for(int i=0;i<9;++i)
                for(int j=0;j<9;++j)
                    if(sudoku[i][j]==0)
                        zeroes.add(new Pair<>(i,j));
        recur(sudoku,0,zeroes);
    }
	public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        StringBuffer sb = new StringBuffer();
        int t = sc.nextInt();
        while(t-->0){
            int[][] sudoku = new int[9][9];
            for(int i=0;i<9;++i)
                for(int j=0;j<9;++j)
                    sudoku[i][j]=sc.nextInt();
            solver(sudoku);
            for(int i=0;i<9;++i){
                for(int j=0;j<9;++j)
                    sb.append(sudoku[i][j]+" ");
            }
            sb.append("\n");
        }
        sc.close();
        System.out.println(sb);
	}
}