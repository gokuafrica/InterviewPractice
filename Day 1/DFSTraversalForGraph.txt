// { Driver Code Starts
//Initial Template for Java


import java.util.*;
import java.lang.*;
import java.io.*;

class Driverclass
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int t =sc.nextInt();
        while(t-- > 0)
        {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int nov = sc.nextInt();
            int edg  =sc.nextInt();
            for(int i = 0; i < nov; i++)
                list.add(i, new ArrayList<Integer>());
                
            for(int i = 1; i <= edg; i++)
            {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
                list.get(v).add(u);
            }
            
            ArrayList<Integer> res = new Traversal().dfs(list, nov);
            for (int i = 0; i < res.size (); i++) 
                System.out.print (res.get(i) + " ");
            System.out.println();
        }
    }
}

// } Driver Code Ends


//User function Template for Java


/*
g : adjacency list of graph
N : number of vertices

return a list containing the DFS traversal of the given graph
*/

class Traversal
{
    static ArrayList<Integer> dfs(ArrayList<ArrayList<Integer>> g, int N)
    {
        ArrayList<Integer> traversalOrder = new ArrayList<>(N);
        boolean[] visitedArr = new boolean[N];
        Stack<Integer> dfsStack = new Stack<>();
        dfsStack.push(0);
        while(!dfsStack.empty()){
            Integer element = dfsStack.pop();
            if(!visitedArr[element]){
                traversalOrder.add(element);
                visitedArr[element] = true;
                if(g.get(element) != null && g.get(element).size() > 0){
                    for(int index = g.get(element).size() -1; index >= 0; index--){
                        dfsStack.push(g.get(element).get(index));
                    }
                }
            } 
        }
        return traversalOrder;
    }
}
