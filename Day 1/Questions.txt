Question 1 :
https://practice.geeksforgeeks.org/problems/depth-first-traversal-for-a-graph/1

Question 2 :
https://practice.geeksforgeeks.org/problems/bfs-traversal-of-graph/1



Question 1 answer

class traversal{

 static ArrayList<Integer> dfs(ArrayList<ArrayList<Integer> g, int N) {

     boolean vis[] = new boolean(N);
     for(int i= 0 ;i< N ;i++)
        {
        vis[i] = false;
    }
    ArrayList<Integer> res = new ArrayList<>(0);

     for(int i= 0 ;i< N ;i++)
        {  
         if(!vis[i])
            DFSUtil(i,res,g,N,vis);
        }
    return res;
    }  

    static ArrayList<Integer> DFSUtil (int i, ArrayList<Integer> res , ArrayList<ArrayList<Integer>> list, int N,boolean vis[])
    {
        if(vis[i]) return;
        vis[i] = true;

        res.add(i);

        for( int j= 0; j<list.get(i).size;i++)
        {
            if(!vis[list.get(i).get(j)])
            DFSUtil(list.get(i).get(j),res,list,vis);
        }
    }      
}




class Traversal {
    static ArrayList<Integer> bfs(ArrayList<ArrayList<Integer>> list, int N) {
         boolean vis[] = new boolean[N];
            for (int i = 0; i < N; i++) vis[i] = false;
            
        int src = 0;
        ArrayList<Integer> res = new ArrayList<Integer>(0);
        Queue<Integer> queue = new LinkedList<>();
        vis[src] = true;      
        queue.add(src);           
        while (queue.size() != 0) 
        {
            src = queue.poll();
            res.add (src);
            Iterator<Integer> it = list.get(src).iterator();
            while (it.hasNext()) 
            {
                int n = it.next();
                if (!vis[n]) 
                {
                    vis[n] = true;
                    queue.add(n);
                }
            }
        }
        return res;
    }
}