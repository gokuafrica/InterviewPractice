// { Driver Code Starts
// Initial Template for Java

import java.util.*;
class Rat {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] a = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();

            GfG g = new GfG();
            ArrayList<String> res = g.printPath(a, n);
            if (res.size() > 0) {
                for (int i = 0; i < res.size(); i++)
                    System.out.print(res.get(i) + " ");
                System.out.println();
            } else {
                System.out.println(-1);
            }
        }
    }
}
// } Driver Code Ends


// User function Template for Java

// m is the given matrix and n is the order of matrix
class GfG {
    private static class Coordinate {
        int x,y;
        public int hashCode(){
            return x+y;
        }
        public boolean equals(Object obj){
            Coordinate c = (Coordinate)obj;
            if(this.x==c.x && this.y==c.y)
                return true;
            else
                return false;
        }
        Coordinate(int i, int j){
            x = i;
            y = j;
        }
    }
    public static ArrayList<String> paths;
    public static int n;
    public static HashSet<Coordinate> m;
    
    //if we traverse in order: D L R U no need to sort at the end. That fixed the time complexity issue
    public static void recur(Coordinate c,String path,HashSet<Coordinate> visited){
        visited.add(c);
        if(c.x==n-1 && c.y==n-1){
            paths.add(path);
            return;
        }
        int i=c.x,j=c.y;
        Coordinate temp;
        temp = new Coordinate(i+1,j);
        if(m.contains(temp) && !visited.contains(temp))
            recur(temp,path+"D",(HashSet<Coordinate>)visited.clone());
        temp = new Coordinate(i,j-1);
        if(m.contains(temp) && !visited.contains(temp))
            recur(temp,path+"L",(HashSet<Coordinate>)visited.clone());
        temp = new Coordinate(i,j+1);
        if(m.contains(temp) && !visited.contains(temp))
            recur(temp,path+"R",(HashSet<Coordinate>)visited.clone());
        temp = new Coordinate(i-1,j);
        if(m.contains(temp) && !visited.contains(temp)){
            recur(temp,path+"U",(HashSet<Coordinate>)visited.clone());
        }
    }
    public static ArrayList<String> printPath(int[][] m, int n) {
        paths = new ArrayList<>();
        GfG.n = n;
        GfG.m = new HashSet<>();
        for(int i=0;i<n;++i)
            for(int j=0;j<n;++j)
                if(m[i][j]==1)
                    GfG.m.add(new Coordinate(i,j));
        if(m[0][0]!=0){
            recur(new Coordinate(0,0),"",new HashSet<>());
        }
        //Collections.sort(paths);
        return paths;
    }
}