class GFG {
    static class Activity implements Comparable<Activity>{
        int start,end;
        Activity(int s, int e){
            start = s;
            end = e;
        }
        public int compareTo(Activity a){
            if(this.end>a.end)
                return 1;
            else if(this.end<a.end)
                return -1;
            else{
                if(this.start>a.start)
                    return 1;
                else if(this.start<a.start)
                    return -1;
                else
                    return 0;
                    
            }
        }
        public String toString(){
            return start+":"+end;
        }
        public int hashCode(){
            return this.end;
        }
        public boolean isEquals(Object obj){
            Activity a = (Activity)obj;
            if(a.start==this.start && a.end==this.end)
                return true;
            else
                return false;
        }
    }
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);
		StringBuffer sb = new StringBuffer();
		int x = sc.nextInt();
		while(x-->0){
		    int n = sc.nextInt();
		    int[] start = new int[n];
		    int[] end = new int[n];
		    for(int i=0;i<n;++i)
		        start[i]=sc.nextInt();
		    for(int i=0;i<n;++i)
		        end[i]=sc.nextInt();
		    int counter=0;
		    TreeSet<Activity> t = new TreeSet<>();
		    HashMap<Activity,Integer> map = new HashMap<>();
		    LinkedList<Integer> resultSet = new LinkedList<>();
		    for(int i=0;i<n;++i){
		        Activity a = new Activity(start[i],end[i]);
		        t.add(a);
		        map.put(a,counter++);
		    }
		    Iterator<Activity> i = t.iterator();
		    int finishtime = Integer.MIN_VALUE;
		    while(i.hasNext()){
		        Activity a = i.next();
		        if(a.start>=finishtime){
		            finishtime = a.end;
		            resultSet.add(map.get(a)+1);
		        }
		    }
		    for(Integer ele: resultSet)
		        sb.append(ele+" ");
		    sb.append("\n");
		}
		sc.close();
		System.out.println(sb);
	}
}