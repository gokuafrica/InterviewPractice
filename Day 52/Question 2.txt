package heap;

//{ Driver Code Starts
import java.util.*;

class Heap_Sort {
	void printArray(int arr[], int n) {
		// int n = arr.length;
		for (int i = 0; i < n; ++i)
			System.out.print(arr[i] + " ");
		System.out.println();
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		Heap_Sort hs = new Heap_Sort();
		int arr[] = new int[1000000];
		int T = sc.nextInt();
		while (T > 0) {
			int n = sc.nextInt();
			for (int i = 0; i < n; i++)
				arr[i] = sc.nextInt();
			hs.heapSort(arr, n);
			hs.printArray(arr, n);
			T--;
		}
	}

	public void heapSort(int arr[], int n) {
		GfG g = new GfG();
		g.buildHeap(arr, n);
		for (int i = n - 1; i >= 0; i--) {
			int temp = arr[0];
			arr[0] = arr[i];
			arr[i] = temp;
			g.heapify(arr, i, 0);
		}
	}
}

//} Driver Code Ends

class GfG {
	void swap(int[] a, int i, int j) {
		int temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}

	void heapify(int arr[], int n, int i) {
		int maxi = i;
		int l = 2 * i + 1, r = 2 * i + 2;
		if (l >= n)
			return;
		if (r < n) {
			maxi = (arr[maxi] >= arr[l]) ? ((arr[maxi] >= arr[r]) ? maxi : r) : ((arr[l] >= arr[r]) ? l : r);
		} else {
			maxi = (arr[maxi] >= arr[l]) ? maxi : l;
		}
		if (maxi != i) {
			swap(arr, i, maxi);
			heapify(arr, n, maxi);
		}
	}

//Rearranges input array so that it becomes a max heap
	void buildHeap(int arr[], int n) {
		for (int i = n / 2 - 1; i >= 0; --i) {
			heapify(arr, n, i);
		}
	}
}